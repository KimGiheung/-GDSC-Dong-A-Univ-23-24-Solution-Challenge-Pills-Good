"""Ai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vonf9wC7uK4NkEk-_WsZDYuEH4K2zDlv

---
# 01. 활경 설정
---
"""
import schedule
import shutil
import time
import os
import json
import pandas as pd
from datetime import datetime, timedelta
import firebase_admin
from firebase_admin import credentials, initialize_app, storage
import requests

# 서비스 계정 키(JSON 파일)의 경로
cred = credentials.Certificate(f"C:\Users\ewqds\OneDrive\문서\PillsGood\pills-good-610c8feaac9d.json")
# 로컬에 저장할 디렉토리 지정 (예: '/your/local/directory/')
path = f'C:\Users\ewqds\Documents\GitHub\-GDSC-Dong-A-Univ-23-24-Solution-Challenge-Pills-Good\AI\data\input_load'

# 마지막으로 확인한 시간을 기록하는 전역 변수
last_checked_time = time.time()

# Firebase Admin SDK 초기화
bucket_name = 'pills-good.appspot.com'
firebase_admin.initialize_app(cred, {
    'storageBucket': 'pills-good.appspot.com'
})


def job():  
    global last_checked_time
    global path

    start = time.time()
    # Storage 버킷 접근
    bucket = storage.bucket()
    
    #========================firebase data load========================
    # Storage 내의 최신 png 파일 목록 가져오기
    blobs = bucket.list_blobs(prefix="/Ai_input_img")
    # 마지막으로 확인한 시간 이후에 생성된 파일들만 필터링합니다.
    new_blobs = [blob for blob in blobs if blob.time_created > last_checked_time]
    # 필터링된 파일들을 로컬에 저장합니다.
    for blob in new_blobs:
        # 파일명을 생성된 시간으로 설정합니다.
        # 예시: 2023-01-01T00-00-00.png
        filename = blob.name
        file_extension = os.path.splitext(filename)[1]
        new_filename = blob.time_created.strftime("%Y-%m-%d-%H-%M-%S") + file_extension
        local_file_path = os.path.join(path, new_filename)

        # blob을 로컬 파일 시스템에 다운로드합니다.
        blob.download_to_filename(local_file_path)
        #========================firebase data load========================


        # 사용 예current_time.strftime("%Y-%m-%d-%H-%M-%S")
        start = time.time()
        current_time = datetime.now()
        formatted_time = current_time.strftime("%Y-%m-%d-%H-%M-%S")

        destination_blob_name = 'Ai_input_img/' + formatted_time + ".json"
        output_filename = f"C:\Users\ewqds\Documents\GitHub\-GDSC-Dong-A-Univ-23-24-Solution-Challenge-Pills-Good\AI\data\output\\" + formatted_time + ".json"
/////////////////
        upload_blob = bucket.blob(destination_blob_name)
        with open(output_filename, 'rb') as file:
            upload_blob.upload_from_file(file)
        end = time.time()
        print(f"data send Time: {end-start:.5f}sec")

        # 마지막으로 확인한 시간을 업데이트합니다.
        # print("시간 :", last_checked_time)
        last_checked_time = time.time()

        # 정보 출력
        print(f'File {filename} has been downloaded as {new_filename}')

    # # 현재 시간과 마지막으로 확인한 시간 사이에 생성된 모든 파일을 찾습니다.
    # for file_name in os.listdir(path):
    #     if file_name.endswith('.mp3'):
    #         file_path = os.path.join(path, file_name)
    #         file_creation_time = os.path.getctime(file_path)

    #         # 파일 생성 시간이 마지막으로 확인한 시간보다 이후인 경우
    #         if file_creation_time > last_checked_time:
    #             # 현재 시간
    #             current_time = datetime.now()
    #             # "년월일시분" 형식으로 포맷팅합니다.
    #             formatted_time = current_time.strftime("%Y-%m-%d-%H-%M-%S")

    #             # ChatGPT로부터 얻은 답변을 음성으로 변환
                
    #             # Check if the source file exists before attempting to rename
    #             src_file_path = os.path.join(path, latest_file)
    #             if os.path.exists(src_file_path):
    #                 # Rename the file
    #                 os.rename(src_file_path, output_filename)
    #             else:
    #                 print(f"The file {src_file_path} does not exist.")


# 매 분마다 job 함수를 실행합니다.
global_start = time.time()
schedule.every(5).seconds.do(job)
global_end   = time.time()
print(f"All Time: {global_end-global_start:.5f}sec")

if __name__ == "__main__":
    while True:
        schedule.run_pending()
        time.sleep(1)
