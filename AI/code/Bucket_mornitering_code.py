"""Ai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vonf9wC7uK4NkEk-_WsZDYuEH4K2zDlv

---
# 01. 활경 설정
---
"""
import schedule
import time
import os
import json
import unicodedata
import pandas as pd
from datetime import datetime, timedelta
import firebase_admin
from firebase_admin import credentials, initialize_app, storage
import requests

# 서비스 계정 키(JSON 파일)의 경로
cred = credentials.Certificate("C:\\Users\\ewqds\\OneDrive\\문서\\PillsGood\\pills-good-610c8feaac9d.json")
# 로컬에 저장할 디렉토리 지정 (예: '/your/local/directory/')
path = 'C:\\Users\\ewqds\\OneDrive\\문서\\GitHub\\GDSC-2024-solution-challenge\\AI\\data\\input_load'


# 마지막으로 확인한 시간을 기록하는 전역 변수
last_checked_time = time.time()

# Firebase Admin SDK 초기화
bucket_name = 'pills-good.appspot.com'
firebase_admin.initialize_app(cred, {
    'storageBucket': 'pills-good.appspot.com'
})
def job():  
    global last_checked_time
    global path

    start = time.time()
    # Storage 버킷 접근
    bucket = storage.bucket()
    
    # Storage 내의 MP3 파일 목록 가져오기
    blobs = bucket.list_blobs(prefix="Ai_input_img/")
    mp3_files = [blob for blob in blobs if blob.name.endswith('.jpg')]
    # 파일의 생성 날짜를 기준으로 최신 파일 찾기
    if len(mp3_files) == 0:
        return

    latest_file = max(mp3_files, key=lambda x: x.time_created)

    # 파일 다운로드 URL 가져오기
    download_url = latest_file.generate_signed_url(timedelta(seconds=300), method='GET')


    if not os.path.exists(path):
        os.makedirs(path)
        
    # 파일의 원래 이름을 유지하여 로컬 디렉토리에 저장
    local_file_path = os.path.join(path, latest_file.name.replace('/',''))
    response = requests.get(download_url)
    with open(local_file_path, 'wb') as file:
        file.write(response.content)
        time.sleep(0.5)
    end = time.time()
    print(f"Storage Time: {end-start:.5f}sec")

    # 현재 시간과 마지막으로 확인한 시간 사이에 생성된 모든 파일을 찾습니다.
    for file_name in os.listdir(path):
        if file_name.endswith('.jpg'):
            file_path = os.path.join(path, file_name)
            file_creation_time = os.path.getctime(file_path)

            # print(f"File Creation Time: {file_creation_time}, Last Checked Time: {last_checked_time}")  # 시간 비교 출력

            # 파일 생성 시간이 마지막으로 확인한 시간보다 이후인 경우
            if file_creation_time > last_checked_time:
                # print("사용자 입력 들어옴")
                # print(f'New file detected: {file_name}')
                # 여기에 새 파일이 발견될 때 실행할 코드를 추가합니다.

                # # AIresult
                # answer = response['choices'][0]['message']['content']


                # def synthesize_text_to_audio(text, output_filename="C:\\Users\\ewqds\\OneDrive\\문서\\GitHub\\GDSC-2024-solution-challenge\\AI\\data\\input_load\\load_img.jpg"):
                #     # 오디오 파일로 저장
                #     with open(output_filename, "wb") as out:
                #         out.write(response.audio_content)
                #         print(f"Audio content written to '{output_filename}'")
                
                # 현재 시간
                current_time = datetime.now()
                # "년월일시분" 형식으로 포맷팅합니다.
                formatted_time = current_time.strftime("%Y-%m-%d-%H-%M-%S")

                # # ChatGPT로부터 얻은 답변을 음성으로 변환
                # output_filename = "C:\\Users\\ewqds\\OneDrive\\문서\\GitHub\\GDSC-2024-solution-challenge\\AI\\data\\input_load\\" + formatted_time + ".jpg"
                
                # # ACC 포매팅에서 저장
                # synthesize_text_to_audio(answer, output_filename = output_filename)
                # #끝

                # # 사용 예
                # start = time.time()
                # destination_blob_name = 'Ai_input_img/' + formatted_time + ".jpg"

                # upload_blob = bucket.blob(destination_blob_name)
                # with open(output_filename, 'rb') as file:
                #     upload_blob.upload_from_file(file)
                # end = time.time()
                # print(f"data send Time: {end-start:.5f}sec")
    
                # # Initialize pygame
                # pygame.init()
                # # Load the MP3 file
                # pygame.mixer.music.load("C:\\Users\\win\\Documents\\GitHub\\-Ai\\output_audio\\" + formatted_time + ".mp3")
                # # Play the music
                # pygame.mixer.music.play()

                # # Wait for the music to play completely
                # while pygame.mixer.music.get_busy():
                #     time.sleep(1)
                # # 마지막으로 확인한 시간을 업데이트합니다.
                # # print("시간 :", last_checked_time)
                last_checked_time = time.time()


# 매 분마다 job 함수를 실행합니다.
global_start = time.time()
schedule.every(5).seconds.do(job)
global_end   = time.time()
print(f"All Time: {global_end-global_start:.5f}sec")

if __name__ == "__main__":
    while True:
        schedule.run_pending()
        time.sleep(1)